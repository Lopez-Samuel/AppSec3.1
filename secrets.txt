Part 1
	For this part of the assignment, we had to secure all sensitive data that was used in the program. The secrets I found that were not secured were the database root password, and the Django secret key. For this I ran the commands:
$ echo -n ‘thisisatestthing.’ | base64
$ echo -n ‘kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l’ | base64

These commands output the secret keys as base64 encoded which is what Kubernetes uses for secrets. I then inputted these values into two separate files, django-secret-key.yaml, and django-mysqlroot.yaml. These files create the secrets.
 
Django-secret-key
apiVersion: v1
kind: Secret
metadata:  
  name: djangosecretkey
type: Opaque
data:
  password: YWhiaGFidmpoZmR2YnNoY3ZncXZjZ2hhdmRzajEzcTY3dDM3OA==

Django-mysqlroot
apiVersion: v1
kind: Secret
metadata:  
  name: mysqlrootpassword
type: Opaque
data:
  password: dGhpc2lzYXRlc3RoaW5nLg==

I then modified the django-deploy.yaml to include:

            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: mysqlrootpassword
                    key: password

            - name: djangosecretkey
              valueFrom:
                secretKeyRef:
                    name: djangosecretkey
                    key: password

And added the below to the db-deployment.yaml file:
- name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: mysqlrootpassword
                    key: password

The final file I modified was the settings.py file with the below line:
SECRET_KEY = os.environ.get('djangosecretkey')

